#!/usr/bin/python
import sys

from os.path import join, splitext, abspath, dirname, isfile, isdir
from subprocess import call


def save_geo_as_step(geo_file_name, step_file_name):
    """
    Save a .geo file into .step format
    """
    command = ['gmsh', '-save', geo_file_name, '-o', step_file_name]
    call(command)


def make_geo_and_step(geo_code, file_dir, base_file_name):
    """
    Take .geo code, write it to a .geo file and .step file
    Also make .msh files of given element sizes

    return geo_file_name
    """
    geo_file_name = join(file_dir, base_file_name + '.geo')
    step_file_name = join(file_dir, base_file_name + '.step')
    geo_file = open(geo_file_name, 'w')
    geo_file.write(geo_code)
    geo_file.close()
    save_geo_as_step(geo_file_name, step_file_name)
    return geo_file_name


def make_msh(geo_file_name, mesh_dim, element_sizes):
    """
    Make msh files for the given element sizes of the geo file
    """
    base_file_name = geo_file_name[:-4]
    for element_size in element_sizes:
        command = ['gmsh', '-%d' % mesh_dim, geo_file_name,
                   '-o', base_file_name + "-h%.5emsh" % element_size,
                   '-clmax', str(element_size)]
        print(command)
        call(command)


def make_ball_in_cube(radius,
                      side_length,
                      file_dir):
    """
    Make a ball inside a cube, with a 4x4x4 cube inbetween
    as a .geo file and .step file in file-dir saved as

    file_dir/ball_in_cube-rad{rad}-side{side}.geo/step
    """
    if side_length <= 4.0:
        raise ValueError("Side length must be > 4.0")
    if radius >= 2.0:
        raise ValueError("Radius must be < 2.0")
    geo_code = """SetFactory("OpenCASCADE");
//+
Box(1) = {{-{half_side}, -{half_side}, -{half_side}, {side}, {side}, {side}}};
//+
outerBoxBoundary() = Boundary{{Volume{{1}};}};
//+
Delete{{ Volume{{1}}; }}
//+
Box(2) = {{-2, -2, -2, 4, 4, 4}};
//+
innerBoxBoundary() = Boundary{{Volume{{2}};}};
//+
Sphere(3) = {{0, 0, 0, {rad}}};
//+ Add volume between outer cube and inner cube
Surface Loop(4) = {{outerBoxBoundary()}};
Surface Loop(5) = {{innerBoxBoundary()}};
Volume(4) = {{4, 5}};
//+ delete sphere from cubes
BooleanDifference{{Volume{{2}}; Delete;}}{{Volume{{3}}; Delete;}}
""".format(rad=radius,
           half_side=side_length / 2,
           side=side_length)
    base_file_name = \
        "ball_in_cube-rad{rad}-side{side}".format(
            rad=radius, side=side_length)

    geo_file_name = make_geo_and_step(geo_code, file_dir, base_file_name)
    mesh_dim = 3
    element_sizes = [2 ** -i for i in range(1, 5)]
    make_msh(geo_file_name, mesh_dim, element_sizes)


def make_circle_in_square(radius,
                          side_length,
                          file_dir):
    """
    Make a circle inside a square, with a 4x4 square
    inbetween
    as a .geo file and .step file in file-dir saved as

    file_dir/circle_in_square-rad{rad}-side{side}.geo/step
    """
    if side_length <= 4.0:
        raise ValueError("Side length must be > 4.0")
    if radius >= 2.0:
        raise ValueError("Radius must be < 2.0")

    geo_code = """SetFactory("OpenCASCADE");
//+
Rectangle(1) = {{-{half_side}, -{half_side}, 0, {side}, {side}}};
//+
Rectangle(2) = {{-2, -2, 0, 4, 4}};
//+
Disk(3) = {{0, 0, 0, {rad}, {rad}}};
//+ merge rectangles
mergedRects() = BooleanUnion{{Surface{{2}}; Delete;}}{{Surface{{1}}; Delete;}};
//+ delete circle from rectangles
BooleanDifference{{Surface{{mergedRects()}}; Delete;}}{{Surface{{3}}; Delete;}}
""".format(rad=radius,
           half_side=side_length / 2,
           side=side_length)
    base_file_name = \
        "circle_in_square-rad{rad}-side{side}".format(
            rad=radius, side=side_length)

    geo_file_name = make_geo_and_step(geo_code, file_dir, base_file_name)
    mesh_dim = 3
    element_sizes = [2 ** -i for i in range(1, 9)]
    make_msh(geo_file_name, mesh_dim, element_sizes)


def make_annulus(inner_radius, outer_radius, file_dir):
    """
    Make an annulus
    as a .geo file and .step file in file-dir saved as

    file_dir/annulus-inner_rad{inner_rad}-outer_rad{outer_rad}.geo/step
    """
    geo_code = """SetFactory("OpenCASCADE");
//+
Disk(1) = {{0, 0, 0, {outer_rad}, {outer_rad}}};
//+
Disk(2) = {{0, 0, 0, {inner_rad}, {inner_rad}}};
//+
BooleanDifference(3) = {{Surface{{1}}; Delete;}}{{Surface{{2}}; Delete;}};
""".format(inner_rad=inner_radius, outer_rad=outer_radius)
    base_file_name = \
        "annulus-inner_rad{inner_rad}-outer_rad{outer_rad}".format(
            inner_rad=inner_radius, outer_rad=outer_radius)

    make_geo_and_step(geo_code, file_dir, base_file_name)


def make_betterplane(file_dir):
    """
    Make betterplane
    as a .geo file and .step file in file-dir saved as

    file_dir/betterplane.geo/step
    """
    brep_dir = join(abspath(dirname(__file__)),
                    "..", "HelmholtzSommerfeldProblem", "meshes", "brep_files")
    betterplane_brep_file_name = join(brep_dir, "betterplane.brep")
    if not isfile(betterplane_brep_file_name):
        try:
            if not isdir(brep_dir):
                call(['mkdir', brep_dir])
        except Exception as e:
            print("Failed to make directory %s" % brep_dir)
            raise e
        command = ['curl', '-o', betterplane_brep_file_name,
                   'https://raw.githubusercontent.com/inducer/geometries/master/surface-3d/betterplane.brep']
        try:
            call(command)
        except Exception as e:
            print("Failed to download betterplane.brep from https://raw.githubusercontent.com/inducer/geometries/master/surface-3d/betterplane.brep")
            raise e
    geo_code = """SetFactory("OpenCASCADE");
//+
v() = ShapeFromFile("%s");
Box(2) = {-12, -5.62, -11.5, 22, 11.24, 23};
BooleanDifference{Volume{2}; Delete;}{Volume{v()}; Delete;}
""" % betterplane_brep_file_name
    base_file_name = "betterplane"
    make_geo_and_step(geo_code, file_dir, base_file_name)


# Build meshes
if __name__ == "__main__":
    mesh_dir = join(abspath(dirname(__file__)),
                    '../HelmholtzSommerfeldProblem/meshes/')
    # ball in cube
    make_ball_in_cube(1.0, 12.0, mesh_dir)
    make_ball_in_cube(1.0, 8.0, mesh_dir)
    make_ball_in_cube(1.0, 6.0, mesh_dir)
    make_ball_in_cube(1.0, 5.5, mesh_dir)
    make_ball_in_cube(1.0, 5.0, mesh_dir)
    make_ball_in_cube(1.0, 4.5, mesh_dir)
    make_ball_in_cube(1.0, 4.2, mesh_dir)
    # circle in square
    make_circle_in_square(1.0, 12.0, mesh_dir)
    make_circle_in_square(1.0, 8.0, mesh_dir)
    make_circle_in_square(1.0, 6.0, mesh_dir)
    make_circle_in_square(1.0, 5.5, mesh_dir)
    make_circle_in_square(1.0, 5.0, mesh_dir)
    make_circle_in_square(1.0, 4.5, mesh_dir)
    make_circle_in_square(1.0, 4.2, mesh_dir)
    # annulus
    make_annulus(1.0, 2.0, mesh_dir)
    # betterplane
    make_betterplane(mesh_dir)
